/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *//*

package com.gadget.controller.generated;

import com.gadget.dto.auth.AuthSessionDto;
import java.math.BigDecimal;
import com.gadget.dto.generated.CampaignDto;
import com.gadget.dto.generated.CampaignFileDto;
import com.gadget.dto.generated.CampaignInputDto;
import com.gadget.dto.generated.CampaignMemberDto;
import com.gadget.dto.generated.CampaignPublicDto;
import com.gadget.dto.generated.CampaignUpdateDto;
import com.gadget.dto.company.CompanyDto;
import com.gadget.dto.company.CompanyFileDto;
import com.gadget.dto.company.CompanyInputDto;
import com.gadget.dto.company.CompanyMemberDto;
import com.gadget.dto.company.CompanyMemberInputDto;
import com.gadget.dto.company.CompanyMemberUpdateDto;
import com.gadget.dto.generated.CronInputDto;
import com.gadget.dto.generated.ErrorDto;
import com.gadget.dto.generated.FeedbackAnswerDto;
import com.gadget.dto.generated.FeedbackAnswerInputDto;
import com.gadget.dto.generated.FeedbackDto;
import com.gadget.dto.generated.FeedbackRequestDto;
import com.gadget.dto.generated.FeedbackUpdateRequestDto;
import com.gadget.dto.generated.InvestmentCreateDto;
import com.gadget.dto.generated.InvestmentDto;
import com.gadget.dto.generated.InvestmentFileDto;
import com.gadget.dto.generated.InvestmentUpdateDto;
import com.gadget.dto.generated.KycVerifyResponse;
import com.gadget.dto.auth.LogInDto;
import com.gadget.dto.generated.NewsFeedDto;
import com.gadget.dto.generated.NewsFeedFileDto;
import com.gadget.dto.generated.NewsFeedInputDto;
import com.gadget.dto.generated.PresubscribeInvestmentCreateDto;
import com.gadget.dto.auth.RegisterDto;
import com.gadget.dto.generated.ResetPasswordDto;
import com.gadget.dto.generated.TwoFactorAuthenticationInvestmentDto;
import com.gadget.dto.company.UpdateCompanyDto;
import com.gadget.dto.generated.UpdateNewsFeedDto;
import com.gadget.dto.generated.UpdateNewsFeedPostVisibilityDto;
import com.gadget.dto.auth.UpdatePasswordDto;
import com.gadget.dto.generated.UpdateUserPasswordDto;
import com.gadget.dto.generated.UserAnswerInputArrayDto;
import com.gadget.dto.generated.UserAnswerOutputDto;
import com.gadget.dto.generated.UserAnswersScoreDto;
import com.gadget.dto.user.UserInputDto;
import com.gadget.dto.generated.UserOnboardFileOutputDto;
import com.gadget.dto.generated.UserOnboardOutputDto;
import com.gadget.dto.generated.UserOnboardUpdateDto;
import com.gadget.dto.generated.UserOutputDto;
import com.gadget.dto.generated.UserQuestionDto;
import com.gadget.dto.generated.UserQuestionInputDto;
import com.gadget.dto.generated.UserQuestionUpdateDto;
import com.gadget.dto.generated.UserUpdateDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@Validated
@Api(value = "api", description = "the api API")
public class ApiApi {

    */
/**
     * GET /api/audit/list : List audit logs
     *
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "List audit logs", nickname = "auditControllerGetAuditList", notes = "", response = Object.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearer")
         }, tags={ "audit", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/audit/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<Object>> auditControllerGetAuditList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/auth/email/confirm : Set user email to verified if token is valid
     *
     * @param token  (required)
     * @return Confirm (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Set user email to verified if token is valid", nickname = "authControllerEmailConfirm", notes = "", tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Confirm"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/auth/email/confirm",
        produces = { "application/json" }
    )
    public ResponseEntity<Void> authControllerEmailConfirm(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/auth/google/callback : Callback endpoint for Google Auth
     *
     * @return Successful Response (status code 200)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Callback endpoint for Google Auth", nickname = "authControllerGetLoggedInUser", notes = "", response = AuthSessionDto.class, tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Response", response = AuthSessionDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/auth/google/callback",
        produces = { "application/json" }
    )
    public ResponseEntity<AuthSessionDto> authControllerGetLoggedInUser() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/auth/google : Create a new account via social login
     * On request to this endpoint, you will be redirected to Google Auth login page to get authenticated
     *
     * @return  (status code 200)
     *//*

    @ApiOperation(value = "Create a new account via social login", nickname = "authControllerGoogleAuth", notes = "On request to this endpoint, you will be redirected to Google Auth login page to get authenticated", tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/auth/google"
    )
    public ResponseEntity<Void> authControllerGoogleAuth() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/auth/login : Login endpoint
     *
     * @param logInDto  (required)
     * @return OK (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Login endpoint", nickname = "authControllerLogin", notes = "", response = AuthSessionDto.class, tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "OK", response = AuthSessionDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<AuthSessionDto> authControllerLogin(@ApiParam(value = "", required = true) @Valid @RequestBody LogInDto logInDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/auth/register : Register endpoint
     *
     * @param registerDto  (required)
     * @return Successful Registration (status code 201)
     *         or Bad Request (status code 400)
     *         or Conflict | There is a user with the same email. (status code 409)
     *//*

    @ApiOperation(value = "Register endpoint", nickname = "authControllerRegister", notes = "", response = UserOutputDto.class, tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Successful Registration", response = UserOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 409, message = "Conflict | There is a user with the same email.", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserOutputDto> authControllerRegister(@ApiParam(value = "", required = true) @Valid @RequestBody RegisterDto registerDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/auth/resetPassword : Request to reset password
     * If the request is successfull, it will send an email to user email account with a token to reset the password
     *
     * @param resetPasswordDto  (required)
     * @return Successful (status code 201)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Request to reset password", nickname = "authControllerResetPassword", notes = "If the request is successfull, it will send an email to user email account with a token to reset the password", tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Successful"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/resetPassword",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> authControllerResetPassword(@ApiParam(value = "", required = true) @Valid @RequestBody ResetPasswordDto resetPasswordDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/auth/updatePassword : Request to update password with reset password token
     * Token is sent to user email via notification microservice
     *
     * @param updatePasswordDto  (required)
     * @return Successful (status code 201)
     *         or Bad Request (status code 400)
     *         or Not found (status code 404)
     *//*

    @ApiOperation(value = "Request to update password with reset password token", nickname = "authControllerUpdatePassword", notes = "Token is sent to user email via notification microservice", tags={ "authentication", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Successful"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/updatePassword",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> authControllerUpdatePassword(@ApiParam(value = "", required = true) @Valid @RequestBody UpdatePasswordDto updatePasswordDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/campaign : Create a new campaign
     *
     * @param campaignInputDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Create a new campaign", nickname = "campaignControllerCreateCampaign", notes = "", response = CampaignDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = CampaignDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/campaign",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CampaignDto> campaignControllerCreateCampaign(@ApiParam(value = "", required = true) @Valid @RequestBody CampaignInputDto campaignInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/campaign/{id}/member : Add campaign member
     *
     * @param id  (required)
     * @param fullName  (required)
     * @param role  (optional)
     * @param description  (optional)
     * @param sort  (optional)
     * @param linkedinProfile  (optional)
     * @param file avatar (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Add campaign member", nickname = "campaignControllerCreateCampaignMember", notes = "", response = CampaignMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/campaign/{id}/member",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<CampaignMemberDto> campaignControllerCreateCampaignMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestPart(value = "fullName", required = true) String fullName,@ApiParam(value = "") @Valid @RequestPart(value = "role", required = false) String role,@ApiParam(value = "") @Valid @RequestPart(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestPart(value = "sort", required = false) BigDecimal sort,@ApiParam(value = "") @Valid @RequestPart(value = "linkedinProfile", required = false) String linkedinProfile,@ApiParam(value = "avatar") @Valid @RequestPart(value = "file", required = false) String file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/campaign/{id}/files/{fileId} : Delete campaign file
     *
     * @param id  (required)
     * @param fileId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete campaign file", nickname = "campaignControllerDeleteCampaignFile", notes = "", response = CampaignDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/campaign/{id}/files/{fileId}",
        produces = { "application/json" }
    )
    public ResponseEntity<CampaignDto> campaignControllerDeleteCampaignFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("fileId") BigDecimal fileId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/campaign/{id}/member/{memberId} : Delete campaign member
     *
     * @param id  (required)
     * @param memberId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete campaign member", nickname = "campaignControllerDeleteCampaignMember", notes = "", response = CampaignMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/campaign/{id}/member/{memberId}",
        produces = { "application/json" }
    )
    public ResponseEntity<CampaignMemberDto> campaignControllerDeleteCampaignMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("memberId") BigDecimal memberId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/{id} : Get campaign details
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get campaign details", nickname = "campaignControllerGetCampaign", notes = "", response = CampaignDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<CampaignDto> campaignControllerGetCampaign(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/{id}/files/list : Get campaign files
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get campaign files", nickname = "campaignControllerGetCampaignFiles", notes = "", response = CampaignFileDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignFileDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/{id}/files/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CampaignFileDto>> campaignControllerGetCampaignFiles(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/list : List all campaigns
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "List all campaigns", nickname = "campaignControllerGetCampaignList", notes = "", response = CampaignDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CampaignDto>> campaignControllerGetCampaignList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/{id}/member/list : Get campaign members
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get campaign members", nickname = "campaignControllerGetCampaignMembers", notes = "", response = CampaignMemberDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignMemberDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/{id}/member/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CampaignMemberDto>> campaignControllerGetCampaignMembers(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/{id}/public : Get public campaign
     *
     * @param id  (required)
     * @return Success (status code 200)
     *//*

    @ApiOperation(value = "Get public campaign", nickname = "campaignControllerGetPublicCampaign", notes = "", response = CampaignPublicDto.class, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignPublicDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/{id}/public",
        produces = { "application/json" }
    )
    public ResponseEntity<CampaignPublicDto> campaignControllerGetPublicCampaign(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/campaign/list/public : List public campaigns
     *
     * @param size  (required)
     * @return Success (status code 200)
     *//*

    @ApiOperation(value = "List public campaigns", nickname = "campaignControllerGetPublicCampaignList", notes = "", response = CampaignPublicDto.class, responseContainer = "List", tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignPublicDto.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/campaign/list/public",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CampaignPublicDto>> campaignControllerGetPublicCampaignList(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "size", required = true) BigDecimal size) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/campaign/{id}/issueTokens : Issue campaign tokens
     *
     * @param id  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Issue campaign tokens", nickname = "campaignControllerIssueCampaignTokens", notes = "", response = Boolean.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = Boolean.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/campaign/{id}/issueTokens",
        produces = { "application/json" }
    )
    public ResponseEntity<Boolean> campaignControllerIssueCampaignTokens(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/campaign/{id} : Update campaign details
     *
     * @param id  (required)
     * @param campaignUpdateDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update campaign details", nickname = "campaignControllerUpdateCampaign", notes = "", response = CampaignDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/campaign/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CampaignDto> campaignControllerUpdateCampaign(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody CampaignUpdateDto campaignUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/campaign/{id}/member/{memberId} : Update campaign member
     *
     * @param id  (required)
     * @param memberId  (required)
     * @param fullName  (optional)
     * @param role  (optional)
     * @param description  (optional)
     * @param sort  (optional)
     * @param linkedinProfile  (optional)
     * @param file avatar (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update campaign member", nickname = "campaignControllerUpdateCampaignMember", notes = "", response = CampaignMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CampaignMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/campaign/{id}/member/{memberId}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<CampaignMemberDto> campaignControllerUpdateCampaignMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("memberId") BigDecimal memberId,@ApiParam(value = "") @Valid @RequestPart(value = "fullName", required = false) String fullName,@ApiParam(value = "") @Valid @RequestPart(value = "role", required = false) String role,@ApiParam(value = "") @Valid @RequestPart(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestPart(value = "sort", required = false) BigDecimal sort,@ApiParam(value = "") @Valid @RequestPart(value = "linkedinProfile", required = false) String linkedinProfile,@ApiParam(value = "avatar") @Valid @RequestPart(value = "file", required = false) String file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/campaign/{id}/files/{documentType} : Upload campaign file
     *
     * @param id  (required)
     * @param documentType  (required)
     * @param file  (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Upload campaign file", nickname = "campaignControllerUploadCampaignFile", notes = "", response = CampaignFileDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "campaign", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = CampaignFileDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/campaign/{id}/files/{documentType}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<CampaignFileDto> campaignControllerUploadCampaignFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("documentType") String documentType,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) MultipartFile file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/company : Create a new company
     *
     * @param companyInputDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Create a new company", nickname = "companyControllerCreateCompany", notes = "", response = CompanyDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = CompanyDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/company",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CompanyDto> companyControllerCreateCompany(@ApiParam(value = "", required = true) @Valid @RequestBody CompanyInputDto companyInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/company/{id}/member : Add company member
     *
     * @param id  (required)
     * @param companyMemberInputDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Add company member", nickname = "companyControllerCreateCompanyMember", notes = "", response = CompanyMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/company/{id}/member",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CompanyMemberDto> companyControllerCreateCompanyMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody CompanyMemberInputDto companyMemberInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/company/{id}/files/{fileId} : Delete company file
     *
     * @param id  (required)
     * @param fileId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete company file", nickname = "companyControllerDeleteCompanyFile", notes = "", response = CompanyDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/company/{id}/files/{fileId}",
        produces = { "application/json" }
    )
    public ResponseEntity<CompanyDto> companyControllerDeleteCompanyFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("fileId") BigDecimal fileId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/company/{id}/member/{memberId} : Delete company member
     *
     * @param id  (required)
     * @param memberId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete company member", nickname = "companyControllerDeleteCompanyMember", notes = "", response = CompanyMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/company/{id}/member/{memberId}",
        produces = { "application/json" }
    )
    public ResponseEntity<CompanyMemberDto> companyControllerDeleteCompanyMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("memberId") BigDecimal memberId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/company/{id} : Get company details
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get company details", nickname = "companyControllerGetCompanyById", notes = "", response = CompanyDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/company/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<CompanyDto> companyControllerGetCompanyById(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/company/{id}/files/list : Get company files
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get company files", nickname = "companyControllerGetCompanyFiles", notes = "", response = CompanyFileDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyFileDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/company/{id}/files/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CompanyFileDto>> companyControllerGetCompanyFiles(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/company/list : List all companies
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "List all companies", nickname = "companyControllerGetCompanyList", notes = "", response = CompanyDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/company/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CompanyDto>> companyControllerGetCompanyList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/company/{id}/member/list : Get company members
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get company members", nickname = "companyControllerGetCompanyMembers", notes = "", response = CompanyMemberDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyMemberDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/company/{id}/member/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<CompanyMemberDto>> companyControllerGetCompanyMembers(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/company/{id} : Update company details
     *
     * @param id  (required)
     * @param updateCompanyDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update company details", nickname = "companyControllerUpdateCompany", notes = "", response = CompanyDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/company/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CompanyDto> companyControllerUpdateCompany(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UpdateCompanyDto updateCompanyDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/company/{id}/member/{memberId} : Update company member
     *
     * @param id  (required)
     * @param memberId  (required)
     * @param companyMemberUpdateDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update company member", nickname = "companyControllerUpdateCompanyMember", notes = "", response = CompanyMemberDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CompanyMemberDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/company/{id}/member/{memberId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<CompanyMemberDto> companyControllerUpdateCompanyMember(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("memberId") BigDecimal memberId,@ApiParam(value = "", required = true) @Valid @RequestBody CompanyMemberUpdateDto companyMemberUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/company/{id}/files/{documentType} : Upload company files
     *
     * @param id  (required)
     * @param documentType  (required)
     * @param file  (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Upload company files", nickname = "companyControllerUploadCompanyFile", notes = "", response = CompanyFileDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "company", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = CompanyFileDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/company/{id}/files/{documentType}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<CompanyFileDto> companyControllerUploadCompanyFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("documentType") String documentType,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) MultipartFile file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/cron : Application crons
     *
     * @param cronInputDto  (required)
     * @return Success (status code 200)
     *//*

    @ApiOperation(value = "Application crons", nickname = "cronControllerUserCrons", notes = "", response = Boolean.class, tags={ "cron", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Boolean.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/cron",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<Boolean> cronControllerUserCrons(@ApiParam(value = "", required = true) @Valid @RequestBody CronInputDto cronInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/feedback : Add feedback form
     *
     * @param feedbackRequestDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Add feedback form", nickname = "feedbackControllerAddFeedback", notes = "", response = FeedbackDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/feedback",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<FeedbackDto> feedbackControllerAddFeedback(@ApiParam(value = "", required = true) @Valid @RequestBody FeedbackRequestDto feedbackRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/feedback/{formName}/answer : Answer for feedback form by name
     *
     * @param formName  (required)
     * @param feedbackAnswerInputDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Answer for feedback form by name", nickname = "feedbackControllerAnswerFeedback", notes = "", response = FeedbackAnswerDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackAnswerDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/feedback/{formName}/answer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<FeedbackAnswerDto> feedbackControllerAnswerFeedback(@ApiParam(value = "", required = true) @PathVariable("formName") String formName,@ApiParam(value = "", required = true) @Valid @RequestBody FeedbackAnswerInputDto feedbackAnswerInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/feedback/{id}/answers : Get Feedback form answers
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Get Feedback form answers", nickname = "feedbackControllerGetAllFeedbackAnswers", notes = "", response = FeedbackAnswerDto.class, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackAnswerDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/feedback/{id}/answers",
        produces = { "application/json" }
    )
    public ResponseEntity<FeedbackAnswerDto> feedbackControllerGetAllFeedbackAnswers(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/feedback/{formName} : Get feedback form data by form name
     *
     * @param formName  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Get feedback form data by form name", nickname = "feedbackControllerGetFeedbackForm", notes = "", response = FeedbackDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/feedback/{formName}",
        produces = { "application/json" }
    )
    public ResponseEntity<FeedbackDto> feedbackControllerGetFeedbackForm(@ApiParam(value = "", required = true) @PathVariable("formName") String formName) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/feedback : Get feedback forms
     *
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Get feedback forms", nickname = "feedbackControllerGetFeedbackForms", notes = "", response = FeedbackDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/feedback",
        produces = { "application/json" }
    )
    public ResponseEntity<List<FeedbackDto>> feedbackControllerGetFeedbackForms() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/feedback/{id} : Update feedback form
     *
     * @param id  (required)
     * @param feedbackUpdateRequestDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *//*

    @ApiOperation(value = "Update feedback form", nickname = "feedbackControllerUpdateFeedback", notes = "", response = FeedbackDto.class, tags={ "feedback", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = FeedbackDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/feedback/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<FeedbackDto> feedbackControllerUpdateFeedback(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody FeedbackUpdateRequestDto feedbackUpdateRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/investment/{id}/file/{type} : Upload file for investment request
     *
     * @param id  (required)
     * @param type  (required)
     * @param file  (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Upload file for investment request", nickname = "investmentControllerAddInvestmentFile", notes = "", response = InvestmentFileDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = InvestmentFileDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/investment/{id}/file/{type}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<InvestmentFileDto> investmentControllerAddInvestmentFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("type") String type,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) List<MultipartFile> file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/investment : Create investment request
     *
     * @param investmentCreateDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Create investment request", nickname = "investmentControllerCreateInvestment", notes = "", response = InvestmentDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = InvestmentDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/investment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<InvestmentDto> investmentControllerCreateInvestment(@ApiParam(value = "", required = true) @Valid @RequestBody InvestmentCreateDto investmentCreateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/investment/presubscription : Create presubscription
     *
     * @param presubscribeInvestmentCreateDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Create presubscription", nickname = "investmentControllerCreatePresubscription", notes = "", response = InvestmentDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = InvestmentDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/investment/presubscription",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<InvestmentDto> investmentControllerCreatePresubscription(@ApiParam(value = "", required = true) @Valid @RequestBody PresubscribeInvestmentCreateDto presubscribeInvestmentCreateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/investment/campaign/{id} : Get investment request
     *
     * @param id  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Get investment request", nickname = "investmentControllerGetAllInvestmentsFromCampaign", notes = "", response = InvestmentDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = InvestmentDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/investment/campaign/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<List<InvestmentDto>> investmentControllerGetAllInvestmentsFromCampaign(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/investment/{id} : Get investment request
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Get investment request", nickname = "investmentControllerGetInvestment", notes = "", response = InvestmentDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = InvestmentDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/investment/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<InvestmentDto> investmentControllerGetInvestment(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/investment/{id}/files : Get files from investment request
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Get files from investment request", nickname = "investmentControllerGetInvestmentFiles", notes = "", response = InvestmentFileDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = InvestmentFileDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/investment/{id}/files",
        produces = { "application/json" }
    )
    public ResponseEntity<List<InvestmentFileDto>> investmentControllerGetInvestmentFiles(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/investment/list : Get investments request
     *
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Get investments request", nickname = "investmentControllerGetInvestments", notes = "", response = InvestmentDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = InvestmentDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/investment/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<InvestmentDto>> investmentControllerGetInvestments() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/investment/{id} : Update investment request
     *
     * @param id  (required)
     * @param investmentUpdateDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Update investment request", nickname = "investmentControllerUpdateInvestment", notes = "", response = InvestmentDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "investment", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = InvestmentDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/investment/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<InvestmentDto> investmentControllerUpdateInvestment(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody InvestmentUpdateDto investmentUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/news-feed/file/{type} : Upload file for news feed
     *
     * @param id  (required)
     * @param type  (required)
     * @param file  (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Upload file for news feed", nickname = "newsFeedControllerAddNewsFeedFile", notes = "", response = NewsFeedFileDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = NewsFeedFileDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/news-feed/file/{type}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<NewsFeedFileDto> newsFeedControllerAddNewsFeedFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("type") String type,@ApiParam(value = "") @Valid @RequestPart(value = "file", required = false) List<MultipartFile> file) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/news-feed : Create news feed post
     *
     * @param newsFeedInputDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Create news feed post", nickname = "newsFeedControllerCreatePost", notes = "", response = NewsFeedDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = NewsFeedDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/news-feed",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<NewsFeedDto> newsFeedControllerCreatePost(@ApiParam(value = "", required = true) @Valid @RequestBody NewsFeedInputDto newsFeedInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/news-feed/file/{fileId} : Delete news feed file
     *
     * @param fileId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete news feed file", nickname = "newsFeedControllerDeleteNewsFeedFile", notes = "", response = NewsFeedFileDto.class, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = NewsFeedFileDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/news-feed/file/{fileId}",
        produces = { "application/json" }
    )
    public ResponseEntity<NewsFeedFileDto> newsFeedControllerDeleteNewsFeedFile(@ApiParam(value = "", required = true) @PathVariable("fileId") BigDecimal fileId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/news-feed/{id} : Delete news feed post
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete news feed post", nickname = "newsFeedControllerDeletePost", notes = "", response = NewsFeedDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = NewsFeedDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/news-feed/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<NewsFeedDto> newsFeedControllerDeletePost(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/news-feed/{id} : Get news feed post details
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get news feed post details", nickname = "newsFeedControllerGetNewsFeedById", notes = "", response = NewsFeedDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = NewsFeedDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/news-feed/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<NewsFeedDto> newsFeedControllerGetNewsFeedById(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/news-feed/list : List all news feed posts
     *
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "List all news feed posts", nickname = "newsFeedControllerGetNewsFeedList", notes = "", response = NewsFeedDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = NewsFeedDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/news-feed/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<NewsFeedDto>> newsFeedControllerGetNewsFeedList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/news-feed/{id} : Update news feed post details
     *
     * @param id  (required)
     * @param updateNewsFeedDto  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update news feed post details", nickname = "newsFeedControllerUpdateNewsFeed", notes = "", response = NewsFeedDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = NewsFeedDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/news-feed/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<NewsFeedDto> newsFeedControllerUpdateNewsFeed(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UpdateNewsFeedDto updateNewsFeedDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/news-feed/{id} : Update news feed post visibility
     *
     * @param id  (required)
     * @param updateNewsFeedPostVisibilityDto  (required)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Update news feed post visibility", nickname = "newsFeedControllerUpdatePostVisibility", notes = "", response = NewsFeedDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "news-feed", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = NewsFeedDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/news-feed/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<NewsFeedDto> newsFeedControllerUpdatePostVisibility(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UpdateNewsFeedPostVisibilityDto updateNewsFeedPostVisibilityDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/2fa/authenticate : Generate token to access API when user has 2FA activated
     *
     * @param twoFactorAuthenticationInvestmentDto  (required)
     * @return  (status code 201)
     *//*

    @ApiOperation(value = "Generate token to access API when user has 2FA activated", nickname = "twoFactorAuthenticationControllerAuthenticate", notes = "", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "2FA", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/2fa/authenticate",
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> twoFactorAuthenticationControllerAuthenticate(@ApiParam(value = "", required = true) @Valid @RequestBody TwoFactorAuthenticationInvestmentDto twoFactorAuthenticationInvestmentDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/2fa/generate : Generate qrcode to activate 2FA
     * This method will generate a png image which containes the qrcode to generate the secret token
     *
     * @return  (status code 200)
     *//*

    @ApiOperation(value = "Generate qrcode to activate 2FA", nickname = "twoFactorAuthenticationControllerTwoFactorAuthenticateGenerate", notes = "This method will generate a png image which containes the qrcode to generate the secret token", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "2FA", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/2fa/generate"
    )
    public ResponseEntity<Void> twoFactorAuthenticationControllerTwoFactorAuthenticateGenerate() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/answers/{investmentId} : Add answers
     *
     * @param investmentId  (required)
     * @param userAnswerInputArrayDto  (required)
     * @return Success (status code 201)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Add answers", nickname = "userControllerAddUserAnswers", notes = "", response = UserAnswersScoreDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = UserAnswersScoreDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/answers/{investmentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserAnswersScoreDto> userControllerAddUserAnswers(@ApiParam(value = "", required = true) @PathVariable("investmentId") BigDecimal investmentId,@ApiParam(value = "", required = true) @Valid @RequestBody UserAnswerInputArrayDto userAnswerInputArrayDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/onboard/{id}/{documentType} : Upload documents for specific onboard ID
     *
     * @param id  (required)
     * @param documentType  (required)
     * @param files  (optional)
     * @return Success (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *//*

    @ApiOperation(value = "Upload documents for specific onboard ID", nickname = "userControllerAddUserOnboardDocument", notes = "", response = UserOnboardFileOutputDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = UserOnboardFileOutputDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/onboard/{id}/{documentType}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    public ResponseEntity<List<UserOnboardFileOutputDto>> userControllerAddUserOnboardDocument(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("documentType") String documentType,@ApiParam(value = "") @Valid @RequestPart(value = "files", required = false) List<MultipartFile> files) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/question : Add new question
     *
     * @param userQuestionInputDto  (required)
     * @return Success (status code 201)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Add new question", nickname = "userControllerAddUserQuestion", notes = "", response = UserQuestionInputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = UserQuestionInputDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/question",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserQuestionInputDto> userControllerAddUserQuestion(@ApiParam(value = "", required = true) @Valid @RequestBody UserQuestionInputDto userQuestionInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user : Create user
     *
     * @param userInputDto  (required)
     * @return Successful (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Create user", nickname = "userControllerCreateUser", notes = "", response = UserOutputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Successful", response = UserOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserOutputDto> userControllerCreateUser(@ApiParam(value = "", required = true) @Valid @RequestBody UserInputDto userInputDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/user/onboard/{id}/files/{fileId} : Delete onboard file
     *
     * @param id  (required)
     * @param fileId  (required)
     * @return Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete onboard file", nickname = "userControllerDeleteOnboardFile", notes = "", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/user/onboard/{id}/files/{fileId}",
        produces = { "application/json" }
    )
    public ResponseEntity<Void> userControllerDeleteOnboardFile(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @PathVariable("fileId") BigDecimal fileId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * DELETE /api/user/question/{id} : Delete question
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Delete question", nickname = "userControllerDeleteUserQuestion", notes = "", response = Boolean.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Boolean.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/user/question/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<Boolean> userControllerDeleteUserQuestion(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/verify/callback : KYC response
     *
     * @return Success (status code 201)
     *//*

    @ApiOperation(value = "KYC response", nickname = "userControllerEventKyc", notes = "", response = Boolean.class, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = Boolean.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/verify/callback",
        produces = { "application/json" }
    )
    public ResponseEntity<Boolean> userControllerEventKyc() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/{id} : Get user details
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get user details", nickname = "userControllerGetUser", notes = "", response = UserOutputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<UserOutputDto> userControllerGetUser(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/answer/list/{investmentId} : List answers to questions
     * List answers to questions
     *
     * @param investmentId  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "List answers to questions", nickname = "userControllerGetUserAnswerList", notes = "List answers to questions", response = UserAnswerOutputDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserAnswerOutputDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/answer/list/{investmentId}",
        produces = { "application/json" }
    )
    public ResponseEntity<List<UserAnswerOutputDto>> userControllerGetUserAnswerList(@ApiParam(value = "", required = true) @PathVariable("investmentId") BigDecimal investmentId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/onboard/{id} : Get onboard details
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get onboard details", nickname = "userControllerGetUserOnboard", notes = "", response = UserOnboardOutputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserOnboardOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/onboard/{id}",
        produces = { "application/json" }
    )
    public ResponseEntity<UserOnboardOutputDto> userControllerGetUserOnboard(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/onboard/{id}/files : Get files for specific onboard ID
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Get files for specific onboard ID", nickname = "userControllerGetUserOnboardFiles", notes = "", response = UserOnboardFileOutputDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserOnboardFileOutputDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/onboard/{id}/files",
        produces = { "application/json" }
    )
    public ResponseEntity<List<UserOnboardFileOutputDto>> userControllerGetUserOnboardFiles(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/onboard/list : List all onboard requests
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "List all onboard requests", nickname = "userControllerGetUserOnboardList", notes = "", response = UserOnboardOutputDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserOnboardOutputDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/onboard/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<UserOnboardOutputDto>> userControllerGetUserOnboardList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/question/list : List all active questions
     * This questions are used/displayed before the user will invest into a campaign
     *
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "List all active questions", nickname = "userControllerGetUserQuestionList", notes = "This questions are used/displayed before the user will invest into a campaign", response = UserQuestionDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserQuestionDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/question/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<UserQuestionDto>> userControllerGetUserQuestionList() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/verify : KYC verification
     *
     * @return Success (status code 201)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "KYC verification", nickname = "userControllerStartKyc", notes = "", response = KycVerifyResponse.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = KycVerifyResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/verify",
        produces = { "application/json" }
    )
    public ResponseEntity<KycVerifyResponse> userControllerStartKyc() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * POST /api/user/updatePassword : Update user password
     *
     * @param updateUserPasswordDto  (required)
     * @return Successful (status code 201)
     *         or Bad Request (status code 400)
     *         or Not found (status code 404)
     *//*

    @ApiOperation(value = "Update user password", nickname = "userControllerUpdatePassword", notes = "", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Successful"),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/updatePassword",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> userControllerUpdatePassword(@ApiParam(value = "", required = true) @Valid @RequestBody UpdateUserPasswordDto updateUserPasswordDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/user/{id} : Update user
     *
     * @param id  (required)
     * @param userUpdateDto  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update user", nickname = "userControllerUpdateUser", notes = "", response = UserOutputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserOutputDto> userControllerUpdateUser(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UserUpdateDto userUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/user/onboard/{id} : Update user onboard request
     *
     * @param id  (required)
     * @param userOnboardUpdateDto  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update user onboard request", nickname = "userControllerUpdateUserOnboard", notes = "", response = UserOnboardOutputDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = UserOnboardOutputDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/onboard/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserOnboardOutputDto> userControllerUpdateUserOnboard(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UserOnboardUpdateDto userOnboardUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * PUT /api/user/question/{id} : Update question
     *
     * @param id  (required)
     * @param userQuestionUpdateDto  (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "Update question", nickname = "userControllerUpdateUserQuestion", notes = "", response = UserQuestionDto.class, authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserQuestionDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/question/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<UserQuestionDto> userControllerUpdateUserQuestion(@ApiParam(value = "", required = true) @PathVariable("id") BigDecimal id,@ApiParam(value = "", required = true) @Valid @RequestBody UserQuestionUpdateDto userQuestionUpdateDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    */
/**
     * GET /api/user/list : List all registered users
     *
     * @param email Search users by email (optional)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *//*

    @ApiOperation(value = "List all registered users", nickname = "userControllerUserList", notes = "", response = UserOutputDto.class, responseContainer = "List", authorizations = {

        @Authorization(value = "bearer")
         }, tags={ "user", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = UserOutputDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/list",
        produces = { "application/json" }
    )
    public ResponseEntity<List<UserOutputDto>> userControllerUserList(@ApiParam(value = "Search users by email") @Valid @RequestParam(value = "email", required = false) String email) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
*/
